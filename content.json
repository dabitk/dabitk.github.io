{"pages":[{"title":"about","text":"포스트 테스트.","link":"/about/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/03/06/hello-world/"},{"title":"[AOJ][JAVA] CHRISTMAS","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class CHRISTMAS { static final int MOD = 20091101; public static void main(String[] args) throws Exception { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int C = Integer.parseInt(br.readLine()); while(C--&gt;0) { StringTokenizer st = new StringTokenizer(br.readLine()); int N = Integer.parseInt(st.nextToken()); int K = Integer.parseInt(st.nextToken()); st = new StringTokenizer(br.readLine()); int[] arr = new int[st.countTokens()]; int i = 0; while(st.hasMoreTokens()) { arr[i] = Integer.parseInt(st.nextToken()); i++; } //System.out.println(Arrays.toString(arr)); long[] prefixSum = new long[arr.length+1]; for(i = 1; i &lt; prefixSum.length; i++) { prefixSum[i] += (arr[i-1] + prefixSum[i-1]) % K; } //System.out.println(Arrays.toString(prefixSum)); System.out.print(waysToBuy(prefixSum, K) + &quot; &quot;+maxBuys(prefixSum, K)); } } static int waysToBuy(long[] prefixSum, int k) { long[] count = new long[k]; //prefixSum의 각 원소의 등장 횟수. int ret = 0; for(int i=0;i&lt;prefixSum.length;i++) { count[(int) prefixSum[i]]++; } //count[i] C 2 -&gt; 2번 이상 등장한 값 중 2개를 선택하는 조합의 수를 더함. for(int i = 0; i &lt; k; i++) { if(count[i] &gt;= 2) { ret = (int) ((ret + ((count[i] * (count[i] - 1)) / 2)) % MOD); } } return ret; } //겹치지 않게 몇 번이나 살 수 있는지 반환한다. static int maxBuys(long[] prefixSum, int k) { int[] ret = new int[prefixSum.length]; int[] prev = new int[k]; Arrays.fill(prev, -1); for(int i = 0; i &lt; prefixSum.length; i++) { if(i &gt; 0) { ret[i] = ret[i-1]; }else { ret[i] = 0; } int loc = prev[(int) prefixSum[i]]; if(loc != -1) ret[i] = Math.max(ret[i], ret[loc]+1); prev[(int) prefixSum[i]] = i; } return ret[ret.length-1]; }}","link":"/2021/03/08/AOJ-CHRISTMAS/"}],"tags":[],"categories":[]}